// C++ Neural network controller simulation environment for embedded device size comparison purposes
#include <iostream>
#include <string>
#include <array>
#include <math.h> 
#include <vector>
#include <bitset>

#include "RungeKutta4.hh"

typedef unsigned short ushort;

using namespace std;


// Sigmoid activation function
float sigmoid(float x) {
	return 1/(1+exp(-x));
}


// Single network step
vector<float> neural_network_step(ushort input_neurons, ushort output_neurons, vector<float> input, float *weight, float *bias) {
	vector<float>output(output_neurons, 0.0);
	/*for(ushort i = 0; i < output_neurons; i++) {
		output[i] = 0.0;
	}*/

	for(ushort i = 0; i < input_neurons; i++) {
		for(ushort j = 0; j < output_neurons; j++) {
			output[j] += input[i]*(*weight);
			weight++;
		}
	}

	for(ushort i = 0; i < output_neurons; i++) {
		output[i] = output[i] + *bias;
		output[i] = sigmoid(output[i]);
		bias++;
	}
	return output;
}


// Round predictor
void round_predictor(ushort neurons, vector<float> &input) {
	for(ushort i = 0; i < neurons; i++) {
		input[i] = round(input[i]);
	}
}


// Print result
void print_neurons(ushort neurons, vector<float> &input) {
	for(ushort i = 0; i < neurons; i++) {
		std::cout << std::to_string(input[i]) << std::endl;
	}
}


// System variables and ODE
const int state_dim=2;
const double tau = 0.5;

using state_type = std::array<double,state_dim>;

const double xc=70;
const double xl=3;
const double rc=0.005;
const double rl=0.05;
const double ro=1;
const double vs=1;


auto system_post = [](state_type &x, const double &u) noexcept {
	auto rhs =[](state_type& xx,  const state_type &x, const double &u) noexcept {
		if(u==1) {
			xx[0]=-rl/xl*x[0]+vs/xl;
			xx[1]=-1/(xc*(ro+rc))*x[1];
		} else {
			xx[0]=-(1/xl)*(rl+ro*rc/(ro+rc))*x[0]-(1/xl)*ro/(5*(ro+rc))*x[1]+vs/xl;
			xx[1]=(1/xc)*5*ro/(ro+rc)*x[0]-(1/xc)*(1/(ro+rc))*x[1];
		}
	};
	scots::runge_kutta_fixed4(rhs,x,u,state_dim,tau);
};


// Define network
const ushort s_dim = 2;
int s_ipd[s_dim];
int s_ngp[s_dim];

const ushort u_dim = 1;
int u_ipd[u_dim];
int u_ngp[u_dim];


float s_eta[] = {0.01, 0.01};
float s_ll[] = {0.5, 5};
float s_ur[] = {1.5, 6};

float u_eta[] = {1};
float u_ll[] = {1};
float u_ur[] = {2};

float weight1[] = {
	2.176411628723144531e+00,-1.895545244216918945e+00,2.741124033927917480e-01,2.590891838073730469e+00,2.474410057067871094e+00,3.403949499130249023e+00,8.393266677856445312e+00,-1.847734451293945312e+00,-1.260759353637695312e+01,-1.609683609008789062e+01,-7.231749534606933594e+00,6.940761804580688477e-01,-4.848119735717773438e+00,1.494173336029052734e+01,-1.347680950164794922e+01,1.837805175781250000e+01,
	1.344731807708740234e+00,9.769515991210937500e+00,-1.748788642883300781e+01,-1.776355743408203125e+00,-5.485651493072509766e+00,-1.557852268218994141e+01,-7.687558650970458984e+00,9.467068672180175781e+00,-2.115541076660156250e+01,5.804182529449462891e+00,-5.602175712585449219e+00,-1.028859996795654297e+01,1.897956490516662598e+00,-3.748010158538818359e+00,-1.716762542724609375e+01,9.130140304565429688e+00,
	9.440083503723144531e+00,-6.143333435058593750e+00,-4.056065559387207031e+00,1.419618129730224609e+00,-5.772262096405029297e+00,9.666152000427246094e+00,-3.228264331817626953e+00,-5.965187549591064453e+00,-2.644581031799316406e+01,-2.355357170104980469e+01,-1.751285171508789062e+01,-3.676520347595214844e+00,-1.790588140487670898e+00,8.138435363769531250e+00,1.040229797363281250e+01,2.899260818958282471e-01,
	5.330605506896972656e+00,-2.970580577850341797e+00,-1.506939888000488281e+00,3.900634050369262695e+00,-2.055195569992065430e+00,5.350780487060546875e+00,9.854486465454101562e+00,-2.873698949813842773e+00,-1.334858512878417969e+01,-9.169204711914062500e+00,-9.016388893127441406e+00,-3.930030822753906250e+00,-1.697622299194335938e+00,-8.355645179748535156e+00,-1.592098331451416016e+01,-6.729911327362060547e+00,
	2.847342491149902344e+00,-1.488949298858642578e+00,-2.337908267974853516e+00,2.204679012298583984e+00,-2.256485223770141602e+00,2.738587856292724609e+00,4.866446018218994141e+00,-1.425011634826660156e+00,-4.792945384979248047e+00,-4.968942165374755859e+00,-4.360566139221191406e+00,-2.232065439224243164e+00,1.150411725044250488e+00,-3.663395404815673828e+00,-4.259497642517089844e+00,3.388842344284057617e+00,
	6.745406389236450195e-01,9.685227394104003906e+00,-7.685739040374755859e+00,-3.093679189682006836e+00,1.098976039886474609e+01,-1.696393966674804688e+01,-9.492150306701660156e+00,9.354728698730468750e+00,1.145865440368652344e+01,1.157095336914062500e+01,-1.544960498809814453e+00,-5.335939884185791016e+00,2.359790802001953125e+00,-1.923279047012329102e+00,-1.466584491729736328e+01,6.188610076904296875e+00,
	-8.885189056396484375e+00,-5.948734760284423828e+00,9.293723106384277344e+00,-3.501387834548950195e+00,-4.008694171905517578e+00,9.329801559448242188e+00,-4.947062492370605469e+00,-5.784958839416503906e+00,4.586938858032226562e+00,-1.898169136047363281e+01,1.481058406829833984e+01,1.056000328063964844e+01,-1.937624359130859375e+01,1.361527824401855469e+01,6.438532352447509766e+00,-7.985849380493164062e+00,
	4.480584621429443359e+00,7.691696166992187500e+00,-8.491559028625488281e+00,-5.297312736511230469e-01,7.210618972778320312e+00,-1.309097385406494141e+01,-2.609406709671020508e+00,7.433705806732177734e+00,3.143234968185424805e+00,6.593611240386962891e+00,-8.190851211547851562e+00,-8.325781822204589844e+00,3.692865610122680664e+00,-7.651501178741455078e+00,-1.011980533599853516e+01,7.336946487426757812e+00,
	-6.652381896972656250e+00,-6.776165008544921875e+00,8.444152832031250000e+00,-1.784296751022338867e+00,-5.686702728271484375e+00,1.130263805389404297e+01,-1.227598905563354492e+00,-6.548994064331054688e+00,1.862073540687561035e+00,-2.390466499328613281e+01,1.176329326629638672e+01,9.521018981933593750e+00,-4.103014945983886719e+00,1.084660339355468750e+01,6.568543434143066406e+00,-7.109822750091552734e+00,
	5.660858631134033203e+00,-3.674654960632324219e+00,-3.180186986923217773e+00,3.623732805252075195e+00,-3.180723190307617188e+00,6.255550384521484375e+00,1.095843505859375000e+01,-3.561888933181762695e+00,1.287438774108886719e+01,-1.063729000091552734e+01,-1.043153095245361328e+01,-5.092561244964599609e+00,-2.547605991363525391e+00,-8.985444068908691406e+00,-1.542376899719238281e+01,-3.700889587402343750e+00,
	3.485035419464111328e+00,-1.706561803817749023e+00,-1.921390175819396973e+00,2.213623762130737305e+00,-6.537364125251770020e-01,3.101074457168579102e+00,5.631110668182373047e+00,-1.639207243919372559e+00,-6.357055664062500000e+00,-5.570163726806640625e+00,-5.110568046569824219e+00,-2.319255828857421875e+00,-6.166861653327941895e-01,-4.495840549468994141e+00,-4.087021350860595703e+00,-1.704844117164611816e+00,
	1.924567103385925293e+00,-6.785075664520263672e-01,-8.266739249229431152e-01,7.648150324821472168e-01,7.487871050834655762e-01,1.583161592483520508e+00,2.839779853820800781e+00,-6.474481225013732910e-01,-4.243981361389160156e+00,-2.647136688232421875e+00,-2.204326152801513672e+00,-5.637647509574890137e-01,-2.264234781265258789e+00,-2.458599567413330078e+00,-8.443912863731384277e-01,-7.428829669952392578e+00,
	6.345665454864501953e-01,-6.067361235618591309e-01,1.029276609420776367e+00,6.884556412696838379e-01,-8.816473484039306641e-01,6.877792477607727051e-01,1.306269288063049316e+00,-5.835478305816650391e-01,-2.853846073150634766e+00,-1.608366131782531738e+00,-1.494967341423034668e+00,-6.547635197639465332e-01,3.946128189563751221e-01,-1.639611244201660156e+00,-8.614931106567382812e-01,2.525735378265380859e+00,
	4.016860723495483398e-01,-3.249029219150543213e-01,8.888930678367614746e-01,-1.968502551317214966e-01,1.435217380523681641e+00,3.617497682571411133e-01,5.933806300163269043e-01,-3.420958220958709717e-01,-2.017042160034179688e+00,-4.612461030483245850e-01,-8.730275034904479980e-01,-2.552887052297592163e-02,-1.964575409889221191e+00,-1.151499867439270020e+00,9.994033724069595337e-02,-5.141552448272705078e+00
};

float bias1[] = {
	-1.050968265533447266e+01,
	-3.531256675720214844e+00,
	1.451016545295715332e+00,
	-5.735653400421142578e+00,
	6.737150192260742188e+00,
	-5.911581516265869141e-01,
	-1.138460636138916016e+01,
	-3.422342300415039062e+00,
	5.019595623016357422e+00,
	-4.106756210327148438e+00,
	8.708119988441467285e-01,
	7.064794301986694336e-01,
	-1.799501180648803711e-01,
	3.840440750122070312e+00,
	-1.704588508605957031e+01,
	7.620767354965209961e-01
};

float weight2[] = {
	1.910419273376464844e+01,
	-1.919668579101562500e+01,
	1.157609939575195312e+01,
	-1.341423702239990234e+01,
	-8.776798248291015625e+00,
	-3.935781860351562500e+01,
	2.514671897888183594e+01,
	-1.767603874206542969e+01,
	1.837090849876403809e+00,
	3.027216148376464844e+01,
	2.518681907653808594e+01,
	-2.197072792053222656e+01,
	1.186025810241699219e+01,
	1.527273368835449219e+01,
	3.485742950439453125e+01,
	-6.728350639343261719e+00
};

float bias2[] = {-6.925013065338134766e-01};

ushort layers[] = {14, 16, 1};

// Controller manipulation functions
void calculateGridHelpers() {
	for(ushort i = 0; i < s_dim; i++) {
		s_ngp[i] = (s_ur[i] - s_ll[i])/s_eta[i] + 1;
		if(i != 0) {
			s_ipd[i] = s_ipd[i-1]*s_ngp[i-1]; 
		} else {
			s_ipd[i] = 1;
		}
	}

	for(ushort i = 0; i < u_dim; i++) {
		u_ngp[i] = (u_ur[i] - u_ll[i])/u_eta[i] + 1;
		if(i != 0) {
			u_ipd[i] = u_ipd[i-1]*u_ngp[i-1]; 
		} else {
			u_ipd[i] = 1;
		}
	}
}

vector<float> x2bin(state_type x) {
	// get id
	int id = 0;
	for(ushort i = 0; i < s_dim; i++) {
		auto d_id = x[i] - s_ll[i];
		id += (d_id+s_eta[i]/2.0)/s_eta[i]*s_ipd[i];
	}
	std::cout << std::to_string(id) << std::endl;

	// get binary
	string binary = std::bitset<64>(id).to_string(); 
	auto length = binary.length();
	auto substr = binary.substr(length - layers[0], length);
	//std::cout << substr << std::endl;

	// return float vector
	vector<float> bin;
	for(ushort i = 0; i < layers[0]; i++) {
		bin.push_back(float(substr[i] - '0'));
		//	std::cout << std::to_string(bin[i]) << std::endl;
	}

	return bin;
}

ushort bin2x(vector<float> bin) {
	string binary = "";
	for(ushort i = 0; i < 64; i++) binary += "0";

	for(ushort i = 0; i < bin.size(); i++) {
		binary[64 - bin.size() + i] = (char)std::to_string(int(bin[i]))[0];
	}
	//std::cout << binary << std::endl;
	ushort id = std::bitset<64>(binary).to_ulong();

	/*state_type x;
	ushort i = u_dim - 1;
	while (i>1) {
		int num = id/u_ipd[i];
		id = id % u_ipd[i];
		x[i] = u_ll[i] + num*u_eta[i];
		i--;
	}*/

//	% id to space
//     i = dim;
//     x = zeros(1, dim);
//     while (i>1)
//         num = floor(id/ipd(i));
//         id = mod(id, ipd(i));
//         x(i) = ll(i)+num*eta(i);
        
//         i = i - 1;
//     end
//     num = id;
//     x(1) = ll(i)+num*eta(1);

	return id + 1;
}


//Run,simulation
int main() {
	calculateGridHelpers();

	state_type x = {{0.7, 5.4}};

	// simulation loop
	for(ushort i = 0; i < 10; i++) {
		// get binary state from state space
		auto bin = x2bin(x);

		// get binary output from binary input
		auto output = neural_network_step(layers[0], layers[1], bin, weight1, bias1);
		output = neural_network_step(layers[1], layers[2], output, weight2, bias2);

		round_predictor(layers[2], output);

		// get input space input
		auto u = bin2x(output);

		// run ode
		system_post(x,u);
		std::cout << "x0: " << std::to_string(x[0]) << " x1: " << std::to_string(x[1]) << " u: " << std::to_string(u) << std::endl;
	}

	return 1;
}